
// ${AUTO_WARNING}
// ${Program}

#ifndef __DESYTOP_${Object}_H__
#define __DESYTOP_${Object}_H__

#include <cmath>
#include "Particle.h"
#include <vector>
#include "${Object}D3PDObject.h"

${{Only:Muon:
class TRandom;
}}

namespace D3PD {
  class ${Object}D3PDObject;
}

namespace DESY {
  
  /**
   *  @short Class that maps ${Object}D3PDObjects to ${Object} Particle class
   *
   *         This class can be used to map the offline ${Object} information from
   *         ${Object}D3PDObjects to DESY::${Object} class. All particles inherit 
   *         from DESY::Particle.
   *
   * @author ${Program}
   *
   */

  class ${Object} : public Basic 
${{Only:Jet,Muon,Electron,Tau,TruthJet: , public Particle }}
  {
  public:

    /// default c'tor
    ${Object}();
    /// default d'tor
    ~${Object}();
    
    /// c'tor with index
    ${Object}( const D3PD::${Object}D3PDObject* ana, const Int_t idx );
${{Only:Muon,Electron,Jet,TruthParticle,TruthJet:
    TLorentzVector* getTLV() const;
    TLorentzVector tlv() const;
}}
${{Only:TruthParticle:
    floatingnumber DeltaR(const TruthParticle& p) const;
}}
${{Only:Electron:
    TLorentzVector* getEgammaTLV() const;
    TLorentzVector  tlv_egamma() const;
}}
${{Only:Muon:
    TLorentzVector* getIDTLV() const;
    TLorentzVector* getMETLV() const;
    TLorentzVector* getMSTLV() const;
    TLorentzVector* getTrackTLV() const;
}}
    
    // variable definitions
${{Only:Muon:
          floatingnumber* m_ptMC;
            //floatingnumber m_ptMS;  ///< store MS pt here, calculated from qoverp and theta
            //floatingnumber m_ptID;  ///< store ID pt here, calculated from qoverp and theta
}}

${{Only:Jet,TruthJet:
    bool            m_isTagged; ///< user-level flag to indicate b-tag
}}
${{Only:Jet:
    floatingnumber  m_scalefactor; ///< scale factor for JES shifts (0 for nominal JES)
}}
${{AllVars:    #type# m_#name#;}}

${{Only:Electron:
    /// delta(R) function using the cluster eta/phi position of the electrons
    floatingnumber DeltaRcluster( const Particle* p ) const;

    /// delta(R) function using the track eta/phi position of the electrons
    floatingnumber DeltaRtrack( const Particle* p ) const;
}}
${{Only:Muon:
      /// smear muon pt
      void correctMCpt();
      
      /// official Muon CP smearing function
      double smearingFunction(double pt,double eta,std::string DetType);
      
      /// official Muon CP smearing combining function
      double combineMomentaSmear(double smearMS,double smearID,double pt, double eta);
}}

${{Only:Jet,TruthJet:
    void           setTagged( const bool isTagged = true ) { m_isTagged = isTagged; }
    bool           isTagged() const { return m_isTagged; }
}}
${{Only:Jet:
    floatingnumber getJetSF() const { return m_scalefactor; }
    void           scaleJES( const floatingnumber scale);
}}

    // check level given here must be consistent with ...D3PDObject.cxx, otherwise you'll get a segfault
${{AllVars:    #type# #name#() const { /*if(!m_ana->getConnectSucceeded(D3PD::${Object}D3PDObject::k#name#)) std::cout<<"#name# not connected!"<<std::endl;*/ return *(m_#name#);NOPOINTER } }}    
${{AllVars:    void #name#( const #type#& val){ *(m_#name#)=val;NOPOINTER } }}    

${{Only:Muon:
      //floatingnumber ptMS() const { return m_ptMS; }
      //floatingnumber ptID() const { return m_ptID; }
      //floatingnumber ptMS() const { return (me_qoverp()!=0)  ?  ( 1./std::fabs(me_qoverp()) * std::sin(me_theta()) ) : 0; }
      floatingnumber ptME() const { return (me_qoverp()!=0)  ?  ( 1./std::fabs(me_qoverp()) * std::sin(me_theta()) ) : 0; }
      floatingnumber ptID() const { return (id_qoverp()!=0)  ?  ( 1./std::fabs(id_qoverp()) * std::sin(id_theta()) ) : 0; } 

      //void SetptMS(const floatingnumber ms_pt) { m_ptMS = ms_pt; }
      //void SetptID(const floatingnumber id_pt) { m_ptID = id_pt; }
    private:
      floatingnumber m_ptMC_value;
      static TRandom* sm_random;
      static constexpr double muMass = 105.66; // in MeV
}}
  private:
    const D3PD::${Object}D3PDObject* m_ana;
  }; // class ${Object}

  typedef std::vector< ${Object} > ${Object}Vec;
  typedef std::vector< ${Object} >::iterator ${Object}VecIt;
  typedef std::vector< ${Object} >::const_iterator ${Object}VecConstIt;


${{Only:Muon,Electron:
  /// sort ${Object}s by pT
  bool operator<( const ${Object}& e1, const ${Object}& e2 );

  /// function class to sort ${Object} vector contents by pT
  class sort${Object}Pt {
  public:
    bool operator()( const ${Object}& e1,
                     const ${Object}& e2 );
  };
}}


} // end of namespace DESY

/// output stream operator overloaded for ${Object} objects
std::ostream& operator<<( std::ostream& out,
                          const DESY::${Object}& rhs );


#endif //__DESY_${Object}_H__
