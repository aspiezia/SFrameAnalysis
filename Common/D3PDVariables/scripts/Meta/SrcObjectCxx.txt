
// ${AUTO_WARNING}
// ${Program}

// Local include(s):
#include "../include/${Object}D3PDObject.h"

namespace D3PD {

  ${Object}D3PDObject::${Object}D3PDObject( SCycleBaseNTuple* parent )
    : SInputVariables< SCycleBaseNTuple >( parent ) {
      m_connectsucceeded.resize(kEnd);
  }

  void ${Object}D3PDObject::setConnectSucceeded(const unsigned int index, const bool success) {
    if (m_connectsucceeded.size() < index+1)  m_connectsucceeded.resize(index+1);
    m_connectsucceeded.at(index) = success;
  }

  void ${Object}D3PDObject::ConnectVariables( const TString& treeName,
                                         const TString& prefix,
                                         const TString& ntupleType ) throw( SError ) {
   
     ${Object}D3PDObject::ConnectVariables( treeName, D3PD::${Object}All, prefix, ntupleType);
                                         
  }                                         

  void ${Object}D3PDObject::ConnectVariables( const TString& treeName,
                                         UInt_t detail_level,
                                         const TString& prefix,
                                         const TString& ntupleType ) throw( SError ) {
                                         
    // get instance of D3PDObjectNames
    D3PDObjectNames m_objectNames(ntupleType);
    
${{Only:Muon,Electron,Jet,TruthJet,GenParticle:
    // particle vector size
    ConnectVariable( treeName, prefix + m_objectNames.getName("N"), N );
}}    
    // connect variables that are defined in Particle.cxx
${{AllBasics:    ConnectVariable( treeName, prefix + m_objectNames.getName("#name#"), #name# );}}        
    

    // connect object specific variables
${{AllVarsDL:detail_level:    setConnectSucceeded(#index#, ConnectVariable( treeName, prefix + m_objectNames.getName("#usename#"), #name#)); }}
        
    // save actual detail_level
    detailLevel = detail_level;

    return;

  }

} // namespace D3PD
